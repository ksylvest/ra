#!/usr/bin/env ruby

# frozen_string_literal: true

require 'ra'
require 'slop'

config = Slop.parse(ARGV) do |options|
  options.banner = 'Usage: ra -w 2560 -h 2048 | convert - sample.avif'

  options.integer '-w', '--width', 'width', default: 2560
  options.integer '-h', '--height', 'height', default: 2048
  options.integer '-fov', 'degrees', default: 90

  options.on('--help', 'help') do
    Ra.logger.log(options)
    exit
  end

  options.on('--version', 'version') do
    Ra.logger.log(Ra::VERSION)
    exit
  end
end

earth = Ra::Pattern::Texture.new(path: File.join(File.dirname(__FILE__), '..', 'assets/earth.avif'))

light_l = Ra::Light.new(
  position: Vector[+3.0, +2.0, -5.0, Ra::Tuple::POINT],
  intensity: Ra::Color.uniform(0.75),
)

light_r = Ra::Light.new(
  position: Vector[-3.0, +2.0, -5.0, Ra::Tuple::POINT],
  intensity: Ra::Color.uniform(0.75),
)

camera = Ra::Camera.new(
  w: config[:w],
  h: config[:h],
  fov: config[:fov] * Math::PI / 180,
  transform: Ra::Transform.view(
    from: Vector[0, +1.5, -4.0, Ra::Tuple::POINT],
    to: Vector[0, +0.5, 0, Ra::Tuple::POINT],
    up: Vector[0, 1, 0, Ra::Tuple::VECTOR],
  ),
)

floor = Ra::Shape::Plane.new(
  material: Ra::Material.new(
    base: Ra::Pattern::Checkers.new(
      colors: [
        Ra::Color.hex('#e2e8f0'),
        Ra::Color.hex('#1e293b'),
      ],
    ),
    reflective: 0.2,
  ),
  transform: Ra::Transform
    .rotate_y(Math::PI / 4),
)

ceiling = Ra::Shape::Plane.new(
  material: Ra::Material.new(
    base: Ra::Pattern::Stripes.new(
      colors: [
        Ra::Color.hex('#e4e4e7'),
        Ra::Color.hex('#e7e5e4'),
      ],
    ),
  ),
  transform: Ra::Transform
    .translate(0, +3.0, 0)
    .scale(0.2, 0.2, 0.2)
    .rotate_y(Math::PI / 4),
)

wall_l = Ra::Shape::Plane.new(
  material: Ra::Material.new(
    base: Ra::Color.hex('#6b21a8'),
  ),
  transform: Ra::Transform
    .translate(0, 0, +3.0)
    .rotate_y(-Math::PI / 4)
    .rotate_x(Math::PI / 2),
)

wall_r = Ra::Shape::Plane.new(
  material: Ra::Material.new(
    base: Ra::Color.hex('#9f1239'),
  ),
  transform: Ra::Transform
    .translate(0, 0, +3.0)
    .rotate_y(Math::PI / 4)
    .rotate_x(Math::PI / 2),
)

sphere = Ra::Shape::Sphere.new(
  material: Ra::Material.new(
    base: earth,
    reflective: 0.3,
  ),
  transform: Ra::Transform
    .translate(0, +0.6, -2.0)
    .rotate_y(Math::PI / 2)
    .scale(0.6, 0.6, 0.6),
)

cube = Ra::Shape::Cube.new(
  material: Ra::Material.new(
    base: Ra::Pattern::Gradient.new(
      color_a: Ra::Color.hex('#f43f5e'),
      color_b: Ra::Color.hex('#8b5cf6'),
    ),
    reflective: 0.3,
  ),
  transform: Ra::Transform
    .translate(+1.6, +0.4, -0.8)
    .scale(0.4, 0.4, 0.4)
    .rotate_y(-Math::PI / 8),
)

cylinder = Ra::Shape::Cylinder.new(
  material: Ra::Material.new(
    base: Ra::Pattern::Gradient.new(
      color_a: Ra::Color.hex('#84cc16'),
      color_b: Ra::Color.hex('#f97316'),
    ),
    reflective: 0.3,
  ),
  transform: Ra::Transform
    .translate(-1.6, +0.4, -0.8)
    .scale(0.4, 0.4, 0.4)
    .rotate_y(+Math::PI / 8),
)

lights = [
  light_l,
  light_r,
]

shapes = [
  floor,
  ceiling,
  wall_l,
  wall_r,
  sphere,
  cube,
  cylinder,
].freeze

world = Ra::World.new(lights:, shapes:)
engine = Ra::Engine.new(camera:, world:)

engine.ppm { |text| Ra.logger.log(text) }
